package main

import (
	"fmt"
	"github.com/blang/semver"
	"time"
)

// NOTE: using blang/semver package, not golang/semver
// ties to https://docs.google.com/document/d/15pp3gZ4ipShEtLR89RKU7jthNBrX7x_384_xsVXtp_E/edit (RH Only)

func getTimeStamp() string {
	t := time.Now().In(time.UTC)
	return t.Format("20060102150405")
}

func printAutoGenVer(anAutoGeneratedPatchVersion semver.Version, shouldBeOldestVersion semver.Version) {
	fmt.Printf("\nAn auto-generated patch version: %s from %s\n",
		anAutoGeneratedPatchVersion, shouldBeOldestVersion)
}

func makeVersion(version string) semver.Version {
	return semver.MustParse(version)
}

// user supplies the new minor version to keep this simple
func makeCVETimestampPatchVersion(bumpVersion string) semver.Version {
	timestamp := getTimeStamp()
	shouldBePreRelease := makeVersion(bumpVersion).Pre
	if shouldBePreRelease == nil {
		return semver.MustParse(bumpVersion + "-0." + timestamp + ".patched")
	} else {
		return semver.MustParse(bumpVersion + ".0." + timestamp + ".patched")
	}
}

func testAndPrintThreeWayOrdering(
	shouldBeOldestVersion semver.Version,
	anAutoGeneratedPatchVersion semver.Version,
	shouldBeLatestVersion semver.Version,
) {
	if shouldBeLatestVersion.GT(anAutoGeneratedPatchVersion) {
		fmt.Printf("  shouldBeLatestVersion (%s) is greater than anAutoGeneratedPatchVersion (%s)\n",
			shouldBeLatestVersion, anAutoGeneratedPatchVersion)
	} else {
		fmt.Printf("  shouldBeLatestVersion (%s) is NOT greater than anAutoGeneratedPatchVersion (%s)\n",
			shouldBeLatestVersion, anAutoGeneratedPatchVersion)
	}
	if anAutoGeneratedPatchVersion.GT(shouldBeOldestVersion) {
		fmt.Printf("      semver ordering is: \n      %s\n      %s\n      %s\n",
			shouldBeOldestVersion, anAutoGeneratedPatchVersion, shouldBeLatestVersion)
	} else {
		fmt.Printf("      anAutoGeneratedPatchVersion (%s) is NOT greater than shouldBeOldestVersion (%s)\n",
			anAutoGeneratedPatchVersion, shouldBeOldestVersion)
	}

}

func testAndPrintFourWayOrdering(
	shouldBeOldestVersion semver.Version,
	anAutoGeneratedPatchVersion semver.Version,
	shouldBeIntermediateVersion semver.Version,
	shouldBeLatestVersion semver.Version,
) {
	if shouldBeLatestVersion.GT(anAutoGeneratedPatchVersion) {
		fmt.Printf("  shouldBeLatestVersion (%s) is greater than anAutoGeneratedPatchVersion (%s)\n",
			shouldBeLatestVersion, shouldBeIntermediateVersion)
	} else {
		fmt.Printf("  shouldBeLatestVersion (%s) is NOT greater than anAutoGeneratedPatchVersion (%s)\n",
			shouldBeLatestVersion, anAutoGeneratedPatchVersion)
	}
	if anAutoGeneratedPatchVersion.GT(shouldBeIntermediateVersion) {
		fmt.Printf("    anAutoGeneratedPatchVersion (%s) is greater than shouldBeIntermediateVersion (%s)\n",
			anAutoGeneratedPatchVersion, shouldBeIntermediateVersion)
	} else {
		fmt.Printf("    anAutoGeneratedPatchVersion (%s) is NOT greater than shouldBeIntermediateVersion (%s)\n",
			anAutoGeneratedPatchVersion, shouldBeIntermediateVersion)
	}
	if shouldBeIntermediateVersion.GT(shouldBeOldestVersion) {
		fmt.Printf("      semver ordering is: \n      %s\n      %s\n      %s\n      %s\n",
			shouldBeOldestVersion, anAutoGeneratedPatchVersion, shouldBeIntermediateVersion, shouldBeLatestVersion)
	} else {
		fmt.Printf("      shouldBeIntermediateVersion (%s) is NOT greater than shouldBeOldestVersion (%s)\n",
			shouldBeIntermediateVersion, shouldBeOldestVersion)
	}
}

func main() {

	latestVersion := "1.2.4"
	cveBumpVersion := "1.2.4"
	oldestVersion := "1.2.3"

	printAutoGenVer(makeCVETimestampPatchVersion(cveBumpVersion), makeVersion(oldestVersion))
	testAndPrintThreeWayOrdering(
		makeVersion(oldestVersion),
		makeCVETimestampPatchVersion(cveBumpVersion),
		makeVersion(latestVersion),
	)

	latestVersion = "1.2.4-1"
	cveBumpVersion = "1.2.4"
	oldestVersion = "1.2.3"

	printAutoGenVer(makeCVETimestampPatchVersion(cveBumpVersion), makeVersion(oldestVersion))
	testAndPrintThreeWayOrdering(
		makeVersion(oldestVersion),
		makeCVETimestampPatchVersion(cveBumpVersion),
		makeVersion(latestVersion),
	)

	latestVersion = "1.2.4"
	intermediateVersion := "1.2.3-2"
	cveBumpVersion = "1.2.3-1"
	oldestVersion = "1.2.3-1"

	printAutoGenVer(makeCVETimestampPatchVersion(cveBumpVersion), makeVersion(oldestVersion))
	testAndPrintFourWayOrdering(
		makeVersion(oldestVersion),
		makeCVETimestampPatchVersion(cveBumpVersion),
		makeVersion(intermediateVersion),
		makeVersion(latestVersion),
	)

	latestVersion = "1.2.4"
	intermediateVersion = "1.2.3-1.0.20210113203232.patched"
	cveBumpVersion = "1.2.3-1"
	oldestVersion = "1.2.3-1"

	printAutoGenVer(makeCVETimestampPatchVersion(cveBumpVersion), makeVersion(oldestVersion))
	testAndPrintFourWayOrdering(
		makeVersion(oldestVersion),
		makeCVETimestampPatchVersion(cveBumpVersion),
		makeVersion(intermediateVersion),
		makeVersion(latestVersion),
	)
}
